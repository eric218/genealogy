package com.dct.swocean.util;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

public class ImageRemarkUtil
{

    // 水印透明度
    private static float alpha = 0.5f;
    // 水印横向位置
    private static int positionWidth = 1;
    // 水印纵向位置
    private static int positionHeight = 1;
    // 水印文字字体
    private static Font font = new Font("宋体", Font.BOLD, 14);
    // 水印文字颜色
    private static Color color = Color.yellow;

    /**
     * 对水印位置、样式进行设置
     * 
     * @param alpha
     *            水印透明度
     * @param positionWidth
     *            水印横向位置
     * @param positionHeight
     *            水印纵向位置
     * @param font
     *            水印文字字体
     * @param color
     *            水印文字颜色
     */
    public static void setImageMarkOptions(float alpha, int positionWidth, int positionHeight, Font font, Color color)
    {
        if (alpha != 0.0f)
            ImageRemarkUtil.alpha = alpha;
        if (positionWidth != 0)
            ImageRemarkUtil.positionWidth = positionWidth;
        if (positionHeight != 0)
            ImageRemarkUtil.positionHeight = positionHeight;
        if (font != null)
            ImageRemarkUtil.font = font;
        if (color != null)
            ImageRemarkUtil.color = color;
    }

    /**
     * 
     * @param iconPath
     *            水印图片路径
     * @param srcImgPath
     *            原图片路径
     * @param targerPath
     *            目标图片路径
     */
    public static void markImageByIcon(String iconPath, String srcImgPath, String targerPath)
    {
        markImageByIcon(iconPath, srcImgPath, targerPath, null, false);
    }

    /**
     * 添加水印图片
     * 
     * @param iconPath
     *            水印图片路径
     * @param srcImgPath
     *            原图片路径
     * @param targerPath
     *            目标图片路径
     * @param degree
     *            水印旋转角度
     */
    public static void markImageByIcon(String iconPath, String srcImgPath, String targerPath, Integer degree,
            boolean byMark)
    {
        OutputStream os = null;
        try
        {

            Image srcImg = ImageIO.read(new File(srcImgPath));

            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null), srcImg.getHeight(null),
                    BufferedImage.TYPE_INT_RGB);

            // 1、得到画笔对象
            Graphics2D g = buffImg.createGraphics();

            // 2、设置对线段的锯齿状边缘处理
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);

            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg.getHeight(null), Image.SCALE_SMOOTH), 0,
                    0, null);
            // 3、设置水印旋转
            if (null != degree)
            {
                double widthDegree = (double) buffImg.getWidth() / 2;
                double heightDegree = (double) buffImg.getHeight() / 2;
                if (byMark)
                {
                    widthDegree = positionWidth;
                    heightDegree = positionHeight;
                }
                g.rotate(Math.toRadians(degree), widthDegree, heightDegree);
            }

            // 4、水印图片的路径 水印图片一般为gif或者png的，这样可设置透明度
            ImageIcon imgIcon = new ImageIcon(iconPath);

            // 5、得到Image对象。
            Image img = imgIcon.getImage();

            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));

            // 6、水印图片的位置
            g.drawImage(img, positionWidth, positionHeight, null);
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
            // 7、释放资源
            g.dispose();

            // 8、生成图片
            os = new FileOutputStream(targerPath);
            ImageIO.write(buffImg, "JPG", os);

            System.out.println("图片完成添加水印图片");

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (null != os)
                    os.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * 添加重复水印图片，旋转角度以水印左下角为中心
     * 
     * @param iconPath
     *            水印图片路径
     * @param srcImgPath
     *            原图片路径
     * @param targerPath
     *            目标图片路径
     * @param degree
     *            旋转角度
     * @param widthRep
     *            水平重复间隔
     * @param heightRep
     *            垂直重复间隔
     */
    public static void markImageCoverByIcon(String iconPath, String srcImgPath, String targerPath, Integer degree,
            Integer widthRep, Integer heightRep)
    {
        OutputStream os = null;
        try
        {

            Image srcImg = ImageIO.read(new File(srcImgPath));

            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null), srcImg.getHeight(null),
                    BufferedImage.TYPE_INT_RGB);

            // 1、得到画笔对象
            Graphics2D g = buffImg.createGraphics();

            // 2、设置对线段的锯齿状边缘处理
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);

            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg.getHeight(null), Image.SCALE_SMOOTH), 0,
                    0, null);
            // 3、设置水印旋转
            if (null != degree)
            {
                g.rotate(Math.toRadians(degree), 1, 1);
            }

            // 4、水印图片的路径 水印图片一般为gif或者png的，这样可设置透明度
            ImageIcon imgIcon = new ImageIcon(iconPath);

            // 5、得到Image对象。
            Image img = imgIcon.getImage();

            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));

            // 6、水印图片的位置
            for (int i = 1; i < buffImg.getWidth(); i += widthRep)
            {
                for (int j = 1; j < buffImg.getHeight(); j += heightRep)
                {
                    g.drawImage(img, i, j, null);
                }
            }

            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
            // 7、释放资源
            g.dispose();

            // 8、生成图片
            os = new FileOutputStream(targerPath);
            ImageIO.write(buffImg, "JPG", os);

            System.out.println("图片完成添加水印图片");

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (null != os)
                    os.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * 给图片添加水印文字
     * 
     * @param logoText
     *            水印文字
     * @param srcImgPath
     *            源图片路径
     * @param targerPath
     *            目标图片路径
     */
    public static void markImageByText(String logoText, String srcImgPath, String targerPath)
    {
        markImageByText(logoText, srcImgPath, targerPath, null, false);
    }

    /**
     * 给图片添加水印文字、可设置水印文字的旋转角度
     * 
     * @param logoText
     *            水印文字
     * @param srcImgPath
     *            源图片路径
     * @param targerPath
     *            目标图片路径
     * @param degree
     *            旋转角度
     * @param byMark
     *            是否以水印坐标为中心设置水印旋转
     */
    public static void markImageByText(String logoText, String srcImgPath, String targerPath, Integer degree,
            boolean byMark)
    {
        InputStream is = null;
        OutputStream os = null;
        try
        {
            // 1、源图片
            Image srcImg = ImageIO.read(new File(srcImgPath));
            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null), srcImg.getHeight(null),
                    BufferedImage.TYPE_INT_RGB);

            // 2、得到画笔对象
            Graphics2D g = buffImg.createGraphics();
            // 3、设置对线段的锯齿状边缘处理
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg.getHeight(null), Image.SCALE_SMOOTH), 0,
                    0, null);
            // 4、设置水印旋转
            if (null != degree)
            {
                double widthDegree = (double) buffImg.getWidth() / 2;
                double heightDegree = (double) buffImg.getHeight() / 2;
                if (byMark)
                {
                    widthDegree = positionWidth;
                    heightDegree = positionHeight;
                }
                g.rotate(Math.toRadians(degree), widthDegree, heightDegree);
            }
            // 5、设置水印文字颜色
            g.setColor(color);
            // 6、设置水印文字Font
            g.setFont(font);
            // 7、设置水印文字透明度
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
            // 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)
            g.drawString(logoText, positionWidth, positionHeight);
            // 9、释放资源
            g.dispose();
            // 10、生成图片
            os = new FileOutputStream(targerPath);
            ImageIO.write(buffImg, "JPG", os);

            System.out.println("图片完成添加水印文字");

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (null != is)
                    is.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            try
            {
                if (null != os)
                    os.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * 给图片添加重复水印文字，旋转角度以水印左下角为中心
     * 
     * @param logoText
     *            水印文字
     * @param srcImgPath
     *            源图片路径
     * @param targerPath
     *            目标图片路径
     * @param degree
     *            旋转角度
     * @param widthRep
    *            水平重复间隔
    * @param heightRep
    *            垂直重复间隔
     */
    public static void markImageByText(String logoText, String srcImgPath, String targerPath, Integer degree,
            Integer widthRep, Integer heightRep)
    {
        InputStream is = null;
        OutputStream os = null;
        try
        {
            // 1、源图片
            Image srcImg = ImageIO.read(new File(srcImgPath));
            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null), srcImg.getHeight(null),
                    BufferedImage.TYPE_INT_RGB);

            // 2、得到画笔对象
            Graphics2D g = buffImg.createGraphics();
            // 3、设置对线段的锯齿状边缘处理
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg.getHeight(null), Image.SCALE_SMOOTH), 0,
                    0, null);
            // 4、设置水印旋转
            if (null != degree)
            {
                g.rotate(Math.toRadians(degree), 1, 1);
            }
            // 5、设置水印文字颜色
            g.setColor(color);
            // 6、设置水印文字Font
            g.setFont(font);
            // 7、设置水印文字透明度
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
            
           
            // 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)
            for (int i = 1; i < buffImg.getWidth(); i += widthRep)
            {
                for (int j = 1; j < buffImg.getHeight(); j += heightRep)
                {
                    g.drawString(logoText, i, j);
                }
            }
            
            // 9、释放资源
            g.dispose();
            // 10、生成图片
            os = new FileOutputStream(targerPath);
            ImageIO.write(buffImg, "JPG", os);

            System.out.println("图片完成添加水印文字");

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (null != is)
                    is.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            try
            {
                if (null != os)
                    os.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args)
    {
        String srcImgPath = "E:/WORK/1.png";
        String logoText = "复 印 无 效";
        String iconPath = "E:/WORK/2.jpg";

        String targerTextPath = "E:/WORK/qie_text.jpg";
        String targerTextPath2 = "E:/WORK/qie_text_rotate.jpg";

        String targerIconPath = "E:/WORK/qie_icon.jpg";
        String targerIconPath2 = "E:/WORK/qie_icon_rotate.jpg";

        System.out.println("给图片添加水印文字开始...");
        // 给图片添加水印文字
        markImageByText(logoText, srcImgPath, targerTextPath);
        // 给图片添加水印文字,水印文字旋转-45
        markImageByText(logoText, srcImgPath, targerTextPath2, -45, false);
        System.out.println("给图片添加水印文字结束...");

        System.out.println("给图片添加水印图片开始...");
        setImageMarkOptions(0.3f, 1, 1, null, null);
        // 给图片添加水印图片
        markImageByIcon(iconPath, srcImgPath, targerIconPath);
        // 给图片添加水印图片,水印图片旋转-45
        markImageByIcon(iconPath, srcImgPath, targerIconPath2, -45, false);
        System.out.println("给图片添加水印图片结束...");

    }
}

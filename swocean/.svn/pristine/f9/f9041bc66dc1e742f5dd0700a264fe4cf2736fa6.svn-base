<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">
	<!-- 日志输出格式参考： -->
	<!-- %d{HH: mm:ss.SSS}——日志输出时间 -->
	<!-- %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用 -->
	<!-- %-5level——日志级别，并且使用5个字符靠左对齐 -->
	<!-- %logger{36}——日志输出者的名字 -->
	<!-- %msg——日志消息 -->
	<!-- %n——平台的换行符  -->
	<!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    	<encoder>
        	<pattern>
        		%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
        	</pattern>
        </encoder>
    </appender>

	<!-- 输出info日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志-->
    	<filter class="ch.qos.logback.classic.filter.LevelFilter">
        	<!--过滤 Error-->
        	<level>ERROR</level>
        	<!--匹配到就禁止-->
        	<onMatch>DENY</onMatch>
        	<!--没有匹配到就允许-->
        	<onMismatch>ACCEPT</onMismatch>
    	</filter>
    	<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，
    	那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <File>${LOG_PATH}/info.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        	<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <fileNamePattern>${LOG_PATH}/info-%d{yyyy-MM-dd}.log.%i</fileNamePattern>
            <!-- 保留最近30天的日志 -->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志输出编码格式化-->
    	<encoder>
        	<charset>UTF-8</charset>
        	<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
    	</encoder>
    </appender>

	<!-- 输出error日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <File>${LOG_PATH}/error.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error-%d{yyyy-MM-dd}.log.%i</fileNamePattern>
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志输出编码格式化-->
    	<encoder>
        	<charset>UTF-8</charset>
        	<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
    	</encoder>
    </appender>

    <!--输出到mysql数据库的appender配置     -->
	 <appender name="MYSQL" class="ch.qos.logback.classic.db.DBAppender">
	     <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
	         <driverClass>com.mysql.jdbc.Driver</driverClass>
	         <url>jdbc:mysql://localhost:3306/swoceandb?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</url>
	         <user>root</user>
	         <password>root</password>
	     </connectionSource>
	 </appender>
    
	<!--指定最基础的日志输出级别-->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="INFO_FILE" />
        <appender-ref ref="ERROR_FILE" />
        <appender-ref ref="MYSQL" />
    </root>

</configuration>
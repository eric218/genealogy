package com.dct.swocean.controller;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.w3c.dom.Node;

import javax.servlet.http.HttpServletRequest;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**
 * 解析xml并分页查询
 * @author litao
 *
 */
@RestController
@RequestMapping("/getxmls")
public class GetXmlController
{

    @RequestMapping(value="/getxml", method=RequestMethod.GET)
    public static JSONArray getXML(@RequestParam("xmlname") String xmlname,
                                   @RequestParam("tagname") String tagname,
                                   @RequestParam("eachpagenum") Integer eachpagenum,
                                   @RequestParam("page") Integer page)
    {
        
        String xmlPath = System.getProperty("user.dir") + "\\src\\main\\resources\\"+xmlname+".xml";
        // 创建工厂实例
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringElementContentWhitespace(true);
        DocumentBuilder builder = null;
        Document doc = null;
        ArrayList reulstList = new ArrayList();
        JSONArray dataArray = new JSONArray();
        try
        {
            builder = factory.newDocumentBuilder();
            doc = builder.parse(xmlPath);
            NodeList list = doc.getElementsByTagName(tagname);

            Integer rowmin = 0;
            Integer rowmax = eachpagenum;
            int count = 0;
            for (int i = 0; i < list.getLength(); i++)
            {
                Node node = list.item(i);
                NamedNodeMap map = node.getAttributes();
                JSONObject dataObject_i = new JSONObject();
                JSONObject dataObject_t = new JSONObject();

                if(page == 1){
                    if (count >= rowmin && count <= rowmax)
                    {
                        // 保存子节点内的属性（name，class，...)
                        for (int j = 0; j < map.getLength(); j++)
                        {
                            Node subNode = map.item(j);
                            if (null != subNode)
                            {
                                reulstList.add(subNode.getNodeName() + ":" + subNode.getNodeValue());
                                dataObject_i.put(subNode.getNodeName(), subNode.getNodeValue());
                            }
                        }
                        if (!dataObject_i.isEmpty())
                        {
                            dataArray.add(dataObject_i);
                        }
                        NodeList childlist = node.getChildNodes();
                        // 保存子节点内的值
                        for (int t = 0; t < childlist.getLength(); t++)
                        {
                            if (childlist.item(t).getNodeType() == Node.ELEMENT_NODE)
                            {
                                reulstList.add(childlist.item(t).getNodeName() + ":" + childlist.item(t).getTextContent());
                                dataObject_t.put(childlist.item(t).getNodeName(), childlist.item(t).getTextContent());
                            }
                        }
                    }
                } 
                if(page != 1){
                    rowmin = (eachpagenum+1) * (page-1);
                    rowmax = eachpagenum + (eachpagenum+1) * (page-1);
                    if (count >= rowmin && count <= rowmax)
                    {
                        // 保存子节点内的属性（name，class，...)
                        for (int j = 0; j < map.getLength(); j++)
                        {
                            Node subNode = map.item(j);
                            if (null != subNode)
                            {
                                reulstList.add(subNode.getNodeName() + ":" + subNode.getNodeValue());
                                dataObject_i.put(subNode.getNodeName(), subNode.getNodeValue());
                            }
                        }
                        if (!dataObject_i.isEmpty())
                        {
                            dataArray.add(dataObject_i);
                        }
                        NodeList childlist = node.getChildNodes();
                        // 保存子节点内的值
                        for (int t = 0; t < childlist.getLength(); t++)
                        {
                            if (childlist.item(t).getNodeType() == Node.ELEMENT_NODE)
                            {
                                reulstList.add(childlist.item(t).getNodeName() + ":" + childlist.item(t).getTextContent());
                                dataObject_t.put(childlist.item(t).getNodeName(), childlist.item(t).getTextContent());
                            }
                        }
                    }
                }
                count++;
                if (!dataObject_t.isEmpty())
                {
                    dataArray.add(dataObject_t);
                }
            }

        }
        catch (ParserConfigurationException e)
        {
            e.printStackTrace();
        }
        catch (SAXException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return dataArray;

    }

}